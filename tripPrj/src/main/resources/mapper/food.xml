<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="foodns">

	<!-- 목록 -->
	<select id="getList" parameterType="int" resultType="food">
	    <![CDATA[
		select * from (select rownum rnum, food.* from  
	  	(select * from food order by food_id asc) food) 
	    where rnum >= ((#{page}-1) * 5+1)  and rnum <= (#{page} * 5)
		]]>
	</select>
	
	<!-- 필터 -->
	<select id="getFilterList" parameterType="foodFilter" resultType="food">
	    <![CDATA[ 
		select * from (select rownum rnum, food.* from
		]]>
	  	(select * from food where food_addr like '%' || #{city, jdbcType=VARCHAR} || '%' and food_addr like '%' || #{district, jdbcType=VARCHAR} || '%' 	
	  	<if test='rate > 0'>
	  		<![CDATA[ 
			and food_rate >= #{rate, jdbcType=VARCHAR} and food_rate < #{rate, jdbcType=VARCHAR} + 1
			]]>
		</if>
		<if test='type.size != 0'>
			and food_type in
			<foreach item="typeChk" index="idx" collection="type" open="(" separator="," close=")">
				#{typeChk, jdbcType=VARCHAR}
			</foreach>
		</if>
		<if test='feat.size != 0'>
			and food_feat in
			<foreach item="featChk" index="idx" collection="feat" open="(" separator="," close=")">
				#{featChk, jdbcType=VARCHAR}
			</foreach>
		</if>
		<![CDATA[ 
	  	order by food_id asc) food where food_cost >= #{minCost, jdbcType=INTEGER} and food_cost <= #{maxCost, jdbcType=INTEGER} ) 
	    where rnum >= ((#{page, jdbcType=INTEGER}-1) * 5+1)  and rnum <= (#{page, jdbcType=INTEGER} * 5)
	    ]]>
	</select>

	<select id="getFilterCount" parameterType="foodFilter" resultType="int">
		select count(food_id) from
		( select * from food where food_addr like '%' || #{city, jdbcType=VARCHAR} || '%' and food_addr like '%' || #{district, jdbcType=VARCHAR} || '%' 
		<if test='rate > 0'>
			<![CDATA[ 
			and food_rate >= #{rate, jdbcType=VARCHAR} and food_rate < #{rate, jdbcType=VARCHAR} + 1
			]]>
		</if>
		<if test='type.size != 0'>
			and food_type in
			<foreach item="typeChk" index="idx" collection="type" open="(" separator="," close=")">
				#{typeChk, jdbcType=VARCHAR}
			</foreach>
		</if>
		<if test='feat.size != 0'>
			and food_feat in
			<foreach item="featChk" index="idx" collection="feat" open="(" separator="," close=")">
				#{featChk, jdbcType=VARCHAR}
			</foreach>
		</if>
		<![CDATA[
		and food_cost >= #{minCost, jdbcType=INTEGER} and food_cost <= #{maxCost, jdbcType=INTEGER} )
		]]>
	</select>

	<!-- 상세 -->
	<select id="getDetail" parameterType="int" resultType="food">
		select * from food where food_id = #{food_id}
	</select>

	<!-- 데이터 수 -->
	<select id="getCount" resultType="int">
		select count(food_id) from food
	</select>

	<!-- 작성 -->
	<insert id="insert" parameterType="food">
		insert into food (
						  food_id,
						  food_name,
						  food_content,
						  food_photo,
						  food_addr,
						  food_tel,
						  food_hour,
						  food_feat,
						  food_type,
						  food_menu,
						  food_cost,
						  food_rate )
			      values (
						  food_seq.nextval,
						  #{food_name, jdbcType=VARCHAR},
						  #{food_content, jdbcType=VARCHAR},
						  #{food_photo, jdbcType=VARCHAR},
						  #{food_addr, jdbcType=VARCHAR},
						  #{food_tel, jdbcType=VARCHAR},
						  #{food_hour, jdbcType=VARCHAR},
						  #{food_feat, jdbcType=VARCHAR},
						  #{food_type, jdbcType=VARCHAR},
						  #{food_menu, jdbcType=VARCHAR},
						  #{food_cost, jdbcType=VARCHAR},
						  #{food_rate, jdbcType=VARCHAR} )
	</insert>

	<!-- 수정 -->
	<update id="modify" parameterType="food">
		update food set
			food_name=#{food_name, jdbcType=VARCHAR},
			food_content=#{food_content, jdbcType=VARCHAR},
			food_photo=#{food_photo, jdbcType=VARCHAR},
			food_addr=#{food_addr, jdbcType=VARCHAR},
			food_tel=#{food_tel, jdbcType=VARCHAR},
			food_hour=#{food_hour, jdbcType=VARCHAR},
			food_feat=#{food_feat, jdbcType=VARCHAR},
			food_type=#{food_type, jdbcType=VARCHAR},
			food_menu=#{food_menu, jdbcType=VARCHAR},
			food_cost=#{food_cost, jdbcType=VARCHAR},
			food_rate=#{food_rate, jdbcType=VARCHAR}
		where food_id=#{food_id}
	</update>

	<!-- 삭제 -->
	<delete id="delete" parameterType="int">
		delete from food where food_id=#{food_id}
	</delete>

	<!-- 인근 장소 -->
	<select id="getQueryList" parameterType="String" resultType="place">
	    <![CDATA[
		 select * from 
		 (select place_id, place_name, place_addr, place_type, place_rate, place_photo from place ORDER BY dbms_random.value)
         where place_addr like '%' || #{city, jdbcType=VARCHAR} || '%' and rownum <= 2
         union all
         select * from 
         (select food_id, food_name, food_addr, food_type, food_rate, food_photo from food ORDER BY dbms_random.value)
         where food_addr like '%' || #{city, jdbcType=VARCHAR} || '%' and rownum <= 2
         union all
         select * from 
         (select room_id, room_name, room_addr, room_type, room_rate, room_photo from room ORDER BY dbms_random.value)
         where room_addr like '%' || #{city, jdbcType=VARCHAR} || '%' and rownum <= 2
		]]>
	</select>

	<!-- 평점 갱신-->
	<update id="updateRate" parameterType="food">
		update food set food_rate=#{food_rate, jdbcType=VARCHAR} where food_id=#{food_id}
	</update>

	<!-- 북마크 -->
	<select id="getMarkCount" parameterType="foodbookmark" resultType="int">
		select count(food_id) from foodbookmark where id=#{id, jdbcType=VARCHAR} and food_id=#{food_id, jdbcType=INTEGER}
	</select>

	<insert id="addMark" parameterType="foodbookmark">
		insert into foodbookmark (
								  food_mark_id,
								  food_id,
								  id )
						  values (
								  food_bookmark_seq.nextval,
								  #{food_id, jdbcType=INTEGER},
								  #{id, jdbcType=VARCHAR})
	</insert>

	<delete id="delMark" parameterType="foodbookmark">
		delete from foodbookmark where id=#{id, jdbcType=VARCHAR} and food_id=#{food_id, jdbcType=INTEGER}
	</delete>

</mapper>